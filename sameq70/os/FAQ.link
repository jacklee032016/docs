^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Frequently Asked Questions:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**1. malloc returns valid pointer even for large memory request**

   Your syscall _sbrk is not checking for memory limit or that check is
   incorrect.
   Refer "10. Using system call _sbrk" below for more details.

**2. memory allocated is not in the address range expected**

   Heap start symbol defined in memory region. Check the Heap start symbol
   used in _sbrk and it's definition.
   Refer "10. Using system call _sbrk" below for more details.

**3. Stack corrupted**

   This may happen if heap grows into stack space. Check if your syscall
   '_sbrk' checks for Heap and Stack collision.

**4. Memory allocated got corrupted**

   This may happen if stack grows into heap space. Check if your syscall
   '_sbrk' checks for Heap and Stack collision.

**6. Error: undefined reference to `_sbrk'**

   It seems syscalls are not present. You can use specs nosys.specs or
   rdimon.specs; or use custom syscalls.
   Refer "How to use system calls?" for more details.

**7. Error: undefined reference to `end'**

   If you used nosys.specs or rdimon.specs, it may expect symbol 'end' to be
   defined to denote the HEAP start. Define symbol 'end'.
   Refer "12. How to update linker scripts for syscalls?" for examples.

**8. Customize Heap and Stack memory regions**

   Refer "12. How to update linker scripts for syscalls?" for examples.

**9. How to use system calls?**

  Atmel ARM GNU Toolchain supports Bare metal ARM EABI by default. So, there
  will be no system calls enabled and functions such as malloc will not work
  as expected.

  Set of system calls implementation are present with this toolchain. They can
  be selected using the specs.

  Example:
  $ arm-none-eabi-gcc --specs=rdimon.specs $(OTHER_LINK_OPTIONS)
  $ arm-none-eabi-gcc --specs=nosys.specs $(OTHER_LINK_OPTIONS)

  Note:
  These specs lets gcc to select library librdimon.a or libnosys.a that
  contains the system calls such as _sbrk. Nosys library contains set of
  default syscall stubs, majority of the stubs just returns failure.

**10. Using system call _sbrk?**

  Function _sbrk assumes that HEAP starts from address pointed by symbol 'end'.
  So, you are expected to define this symbol (usually it is defined in the
  linker script).

  a. _sbrk in rdimon library
     source: newlib/libgloss/arm/syscalls.c

     It assumes HEAP starts at symbol 'end' and Stack starts from rear of ram.
     It also checks if the memory requested (from malloc) is overruns to stack
     or reaches '__heap_limit'.

  b. _sbrk in nosys library
     source: newlib/libgloss/libnosys/sbrk.c

     It assumes HEAP starts at symbol 'end'. It doesn't check if the memory
     requested overruns to stack or reaches the heap end.

**11. Custom syscalls**

  You can add your own or third-party syscalls implementation (e.g. syscalls.c
  from Atmel Software Framework examples). You have to update linker script
  accordingly.

**12. How to update linker scripts for syscalls?**

  Linker scripts should be in sync with the syscalls that you use.

  a. HEAP start assumed by _sbrk should be in sync with Linker script
  b. Order of HEAP and STACK sections assumed by _sbrk should be in sync with
     Linker script

  Example1:
  Assume _sbrk expects heap starts from symbol 'end' and it checks if heap
  overruns into stack (e.g. _sbrk in rdimon library). Then linker script for
  non-fixed size heap should be like below:

  <<<<<<<<<<<< linker script snip >>>>>>>>>>>>
  MEMORY
  {
    rom (rx)  : ORIGIN = 0x00400000, LENGTH = 0x00100000
    ram (rwx) : ORIGIN = 0x20000000, LENGTH = 0x00020000
  }
  
  SECTIONS
  {
      .text :
      {
      ....
      } > rom
      ....
      .bss (NOLOAD) :
      {
      ...
      } > ram
  
      . = ALIGN(4);
      /* End of user data. Heap starts from here */
      end = . ;
  
      /* Stack starts at end of ram */
      _estack = ORIGIN(ram) + LENGTH(ram) - 4;
  }
  <<<<<<<<<<<< linker script snip >>>>>>>>>>>>

  Expected behavior:
  * Heap starts after user data and grows towards the RAM end.
  * Stack starts at end of RAM and grows downward.
  * Function _sbrk will start allocating memory from symbol 'end'
  * Function _sbrk shall check if heap and stack collision. 
   (e.g. sbrk in rdimon)

  Example2:
  Using custom _sbrk
  
  If your _sbrk implementation checks some defined heap limit, you can define
  the linker as below:
  
  <<<<<<<<<<<< linker script snip >>>>>>>>>>>>
  MEMORY
  {
    rom (rx)  : ORIGIN = 0x00400000, LENGTH = 0x00100000
    ram (rwx) : ORIGIN = 0x20000000, LENGTH = 0x00020000
  }
  STACK_SIZE = DEFINED(STACK_SIZE) ? STACK_SIZE : 0x3000;
  HEAP_SIZE = DEFINED(HEAP_SIZE) ? HEAP_SIZE : 0x3000;
  SECTIONS
  {
      .text :
      {
      ....
      } > rom
      ....
      .bss (NOLOAD) :
      {
      ...
      } > ram
  
      /* stack section */
      .stack (NOLOAD):
      {
          _sstack = .;
          . = . + STACK_SIZE;
          _estack = .;
      } > ram
  
      . = ALIGN(4);
  	_end = end = . ;
  
      /* heap section */
      .heap (NOLOAD):
      {
          _heap_start = .;
          . = . + HEAP_SIZE;
          _heap_end = .;
      } > ram
  }
  <<<<<<<<<<<< linker script snip >>>>>>>>>>>>

  Expected behavior:
  * It expects _sbrk start allocating memory from symbol 'end' or '_end' or '_heap_start'
  * _sbrk shall check _heap_end for heap limit
  * stack is defined after user data

